.dual-control-enhancer {
  height: 100vh;
  background: linear-gradient(to bottom, #FFFFFF, #E0E0E0);
  text-align: center;
  .game-grid {
    border-radius: 10px;
    background: white;
    margin: 0 auto;
    max-width: 1024px;
    width: 100%;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-gap: 1rem;
  }

  // opposite to shake effect this effect it's to show when you click on the right card
  // so it must show a glowing effect of green border, animating the border and the box-shadow
  .game-grid.glow {
    border: 2px solid green;
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
    animation: glow 1s;
  }

  // set effect of shaking plus red border for the whole game-grid when the game reset
  .game-grid.shake {
    animation: shake 0.5s;
    border: 2px solid red;
  }

  @keyframes glow {
    0% {
      border: 2px solid green;
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
    }
    50% {
      border: 2px solid green;
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
    }
    100% {
      border: 2px solid green;
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
    }
  }

  @keyframes shake {
    0% {
      transform: translate(1px, 1px) rotate(0deg);
    }
    10% {
      transform: translate(-1px, -2px) rotate(-1deg);
    }
    20% {
      transform: translate(-3px, 0px) rotate(1deg);
    }
    30% {
      transform: translate(3px, 2px) rotate(0deg);
    }
    40% {
      transform: translate(1px, -1px) rotate(1deg);
    }
    50% {
      transform: translate(-1px, 2px) rotate(-1deg);
    }
    60% {
      transform: translate(-3px, 1px) rotate(0deg);
    }
    70% {
      transform: translate(3px, 1px) rotate(-1deg);
    }
    80% {
      transform: translate(-1px, -1px) rotate(1deg);
    }
    90% {
      transform: translate(1px, 2px) rotate(0deg);
    }
    100% {
      transform: translate(1px, -2px) rotate(-1deg);
    }
  }

  .game-card.red {
    background-color: #ff0000;
  }

  .game-card.blue {
    background-color: #0000ff;
  }

  .game-card-container {
    display: flex;
  }

  .game-card-container.position-middle {
    justify-self: center;
  }
  .game-card-container.position-left {
    justify-self: start;
  }
  .game-card-container.position-right {
    justify-self: end;
  }
  .game-card-container.position-top {
    align-self: start;
  }
  .game-card-container.position-bottom {
    align-self: end;
  }

  .instruction-modal {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 100;

    // show and animation at appear
    animation: fadeIn 0.5s;

    @keyframes fadeIn {
      0%,
      100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.1);
      }
    }
  }

  .fade-out {
    animation: fadeOut 0.5s;
  }

  @keyframes fadeOut {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(0.9);
    }
  }
}

@mixin snackbar {
  position: fixed;
  top: 150px;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 2;
  color: white;
  background-color: rgba(0, 0, 0, 0.7);
  padding: 20px;
  border-radius: 10px;


}

.error-message {
  @include snackbar();
}

.success-message {
  @include snackbar();
  // a light green color for success message
    background-color: rgba(130, 216, 130);
}

.game-card {
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  border-radius: 20px;
  overflow: hidden;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  transition: transform 0.3s;
}

// style for card that has been counted
.game-card-counted {
  opacity: 0.05;
}
